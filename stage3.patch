From c9ab1eaf1c081e3478235740d8c8233d0a1b7ae8 Mon Sep 17 00:00:00 2001
From: Agent <agent@example.com>
Date: Fri, 8 Aug 2025 01:50:22 -0700
Subject: [PATCH] feat(stage3): implement base CRUD for units, payment types,
 employee types, equipment groups, positions; add base dictionary controller
 and migrations

---
 .../Api/Dictionary/BaseCrudController.php     | 161 ++++++++++++++++++
 .../Api/Dictionary/EmployeeTypeController.php |  28 +++
 .../Dictionary/EquipmentGroupController.php   |  28 +++
 .../Api/Dictionary/PaymentTypeController.php  |  29 ++++
 .../Api/Dictionary/PositionController.php     |  28 +++
 .../Api/Dictionary/UnitController.php         |  29 ++++
 crm-local/app/Http/Middleware/CheckRole.php   |  11 +-
 .../app/Models/Dictionary/EmployeeType.php    |  23 +++
 .../app/Models/Dictionary/EquipmentGroup.php  |  23 +++
 .../app/Models/Dictionary/PaymentType.php     |  24 +++
 crm-local/app/Models/Dictionary/Position.php  |  23 +++
 crm-local/app/Models/Dictionary/Unit.php      |  24 +++
 .../2025_08_08_100000_create_units_table.php  |  26 +++
 ...8_08_100001_create_payment_types_table.php |  26 +++
 ..._08_100002_create_employee_types_table.php |  25 +++
 ...8_100003_create_equipment_groups_table.php |  25 +++
 ...25_08_08_100004_create_positions_table.php |  25 +++
 crm-local/routes/api.php                      |  48 ++++++
 18 files changed, 603 insertions(+), 3 deletions(-)
 create mode 100644 crm-local/app/Http/Controllers/Api/Dictionary/BaseCrudController.php
 create mode 100644 crm-local/app/Http/Controllers/Api/Dictionary/EmployeeTypeController.php
 create mode 100644 crm-local/app/Http/Controllers/Api/Dictionary/EquipmentGroupController.php
 create mode 100644 crm-local/app/Http/Controllers/Api/Dictionary/PaymentTypeController.php
 create mode 100644 crm-local/app/Http/Controllers/Api/Dictionary/PositionController.php
 create mode 100644 crm-local/app/Http/Controllers/Api/Dictionary/UnitController.php
 create mode 100644 crm-local/app/Models/Dictionary/EmployeeType.php
 create mode 100644 crm-local/app/Models/Dictionary/EquipmentGroup.php
 create mode 100644 crm-local/app/Models/Dictionary/PaymentType.php
 create mode 100644 crm-local/app/Models/Dictionary/Position.php
 create mode 100644 crm-local/app/Models/Dictionary/Unit.php
 create mode 100644 crm-local/database/migrations/2025_08_08_100000_create_units_table.php
 create mode 100644 crm-local/database/migrations/2025_08_08_100001_create_payment_types_table.php
 create mode 100644 crm-local/database/migrations/2025_08_08_100002_create_employee_types_table.php
 create mode 100644 crm-local/database/migrations/2025_08_08_100003_create_equipment_groups_table.php
 create mode 100644 crm-local/database/migrations/2025_08_08_100004_create_positions_table.php

diff --git a/crm-local/app/Http/Controllers/Api/Dictionary/BaseCrudController.php b/crm-local/app/Http/Controllers/Api/Dictionary/BaseCrudController.php
new file mode 100644
index 0000000..8719dfc
--- /dev/null
+++ b/crm-local/app/Http/Controllers/Api/Dictionary/BaseCrudController.php
@@ -0,0 +1,161 @@
+<?php
+
+namespace App\Http\Controllers\Api\Dictionary;
+
+use Illuminate\Http\Request;
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Routing\Controller;
+
+/**
+ * Базовый контроллер CRUD для справочников.
+ *
+ * Позволяет переиспользовать логику поиска, фильтрации, сортировки и пагинации
+ * для всех сущностей-справочников.
+ */
+abstract class BaseCrudController extends Controller
+{
+    /**
+     * Полное имя класса модели.
+     *
+     * @var class-string<Model>
+     */
+    protected string $modelClass;
+
+    /**
+     * Колонки, по которым выполняется поиск по параметру "q".
+     *
+     * @var string[]
+     */
+    protected array $searchable = ['name'];
+
+    /**
+     * Разрешённые для сортировки колонки.
+     *
+     * @var string[]
+     */
+    protected array $sortable = ['id', 'name', 'created_at'];
+
+    /**
+     * Колонки, по которым можно фильтровать через filter[…].
+     *
+     * @var string[]
+     */
+    protected array $filterable = [];
+
+    /**
+     * Вывести список элементов с поддержкой поиска, фильтрации, сортировки и пагинации.
+     */
+    public function index(Request $request)
+    {
+        /** @var Model $model */
+        $model = new $this->modelClass();
+        $query = $model->newQuery();
+
+        // Поиск
+        if ($term = trim((string)$request->input('q'))) {
+            $query->where(function ($w) use ($term) {
+                foreach ($this->searchable as $idx => $col) {
+                    if ($idx === 0) {
+                        $w->where($col, 'like', "%{$term}%");
+                    } else {
+                        $w->orWhere($col, 'like', "%{$term}%");
+                    }
+                }
+            });
+        }
+
+        // Фильтрация
+        foreach ($this->filterable as $col) {
+            $value = $request->input("filter.$col");
+            if ($value !== null && $value !== '') {
+                $query->where($col, $value);
+            }
+        }
+
+        // Сортировка
+        $sort = (string)$request->input('sort', 'id');
+        $direction = str_starts_with($sort, '-') ? 'desc' : 'asc';
+        $column = ltrim($sort, '-');
+        if (!in_array($column, $this->sortable, true)) {
+            $column = 'id';
+        }
+        $query->orderBy($column, $direction);
+
+        // Пагинация
+        $perPage = (int)$request->input('per_page', 25);
+        $perPage = max(1, min($perPage, 100));
+
+        return response()->json(
+            $query->paginate($perPage)->appends($request->query())
+        );
+    }
+
+    /**
+     * Показать одну запись.
+     */
+    public function show($id)
+    {
+        return ($this->modelClass)::findOrFail($id);
+    }
+
+    /**
+     * Создать запись.
+     */
+    public function store(Request $request)
+    {
+        $data = $this->validated($request, 'store');
+        $model = ($this->modelClass)::create($data);
+        return response()->json($model, 201);
+    }
+
+    /**
+     * Обновить запись.
+     */
+    public function update(Request $request, $id)
+    {
+        $model = ($this->modelClass)::findOrFail($id);
+        $data = $this->validated($request, 'update');
+        $model->update($data);
+        return response()->json($model);
+    }
+
+    /**
+     * Пометить запись как удалённую (soft delete).
+     */
+    public function destroy($id)
+    {
+        $model = ($this->modelClass)::findOrFail($id);
+        $model->delete();
+        return response()->json(['status' => 'archived']);
+    }
+
+    /**
+     * Восстановить удалённую запись.
+     */
+    public function restore($id)
+    {
+        $model = ($this->modelClass)::withTrashed()->findOrFail($id);
+        $model->restore();
+        return response()->json(['status' => 'restored']);
+    }
+
+    /**
+     * Валидация входящих данных.
+     *
+     * @param Request $request
+     * @param string $scenario
+     * @return array
+     */
+    protected function validated(Request $request, string $scenario): array
+    {
+        return $request->validate($this->rules($scenario));
+    }
+
+    /**
+     * Получить массив правил валидации для сохранения/обновления.
+     *
+     * @param string $scenario
+     * @return array
+     */
+    abstract protected function rules(string $scenario): array;
+}
\ No newline at end of file
diff --git a/crm-local/app/Http/Controllers/Api/Dictionary/EmployeeTypeController.php b/crm-local/app/Http/Controllers/Api/Dictionary/EmployeeTypeController.php
new file mode 100644
index 0000000..d31cc7d
--- /dev/null
+++ b/crm-local/app/Http/Controllers/Api/Dictionary/EmployeeTypeController.php
@@ -0,0 +1,28 @@
+<?php
+
+namespace App\Http\Controllers\Api\Dictionary;
+
+use App\Models\Dictionary\EmployeeType;
+
+/**
+ * CRUD-контроллер для справочника "Типы сотрудников".
+ */
+class EmployeeTypeController extends BaseCrudController
+{
+    /** @var class-string<EmployeeType> */
+    protected string $modelClass = EmployeeType::class;
+
+    protected array $searchable = ['name'];
+    protected array $sortable   = ['id','name','created_at'];
+    protected array $filterable = ['is_active'];
+
+    protected function rules(string $scenario): array
+    {
+        return [
+            'name'        => ['required', 'string', 'max:255'],
+            'description' => ['nullable', 'string', 'max:2000'],
+            'is_active'   => ['boolean'],
+            'comment'     => ['nullable', 'string', 'max:2000'],
+        ];
+    }
+}
\ No newline at end of file
diff --git a/crm-local/app/Http/Controllers/Api/Dictionary/EquipmentGroupController.php b/crm-local/app/Http/Controllers/Api/Dictionary/EquipmentGroupController.php
new file mode 100644
index 0000000..f5e2145
--- /dev/null
+++ b/crm-local/app/Http/Controllers/Api/Dictionary/EquipmentGroupController.php
@@ -0,0 +1,28 @@
+<?php
+
+namespace App\Http\Controllers\Api\Dictionary;
+
+use App\Models\Dictionary\EquipmentGroup;
+
+/**
+ * CRUD-контроллер для справочника "Группы оборудования".
+ */
+class EquipmentGroupController extends BaseCrudController
+{
+    /** @var class-string<EquipmentGroup> */
+    protected string $modelClass = EquipmentGroup::class;
+
+    protected array $searchable = ['name'];
+    protected array $sortable   = ['id','name','created_at'];
+    protected array $filterable = ['is_active'];
+
+    protected function rules(string $scenario): array
+    {
+        return [
+            'name'        => ['required', 'string', 'max:255'],
+            'description' => ['nullable', 'string', 'max:2000'],
+            'is_active'   => ['boolean'],
+            'comment'     => ['nullable', 'string', 'max:2000'],
+        ];
+    }
+}
\ No newline at end of file
diff --git a/crm-local/app/Http/Controllers/Api/Dictionary/PaymentTypeController.php b/crm-local/app/Http/Controllers/Api/Dictionary/PaymentTypeController.php
new file mode 100644
index 0000000..7895a8b
--- /dev/null
+++ b/crm-local/app/Http/Controllers/Api/Dictionary/PaymentTypeController.php
@@ -0,0 +1,29 @@
+<?php
+
+namespace App\Http\Controllers\Api\Dictionary;
+
+use App\Models\Dictionary\PaymentType;
+
+/**
+ * CRUD-контроллер для справочника "Типы платежей".
+ */
+class PaymentTypeController extends BaseCrudController
+{
+    /** @var class-string<PaymentType> */
+    protected string $modelClass = PaymentType::class;
+
+    protected array $searchable = ['name', 'short_name'];
+    protected array $sortable   = ['id','name','short_name','created_at'];
+    protected array $filterable = ['is_visible'];
+
+    protected function rules(string $scenario): array
+    {
+        return [
+            'name'        => ['required', 'string', 'max:255'],
+            'short_name'  => ['nullable', 'string', 'max:64'],
+            'label_color' => ['nullable', 'string', 'max:32'],
+            'is_visible'  => ['boolean'],
+            'comment'     => ['nullable', 'string', 'max:2000'],
+        ];
+    }
+}
\ No newline at end of file
diff --git a/crm-local/app/Http/Controllers/Api/Dictionary/PositionController.php b/crm-local/app/Http/Controllers/Api/Dictionary/PositionController.php
new file mode 100644
index 0000000..eecaf5c
--- /dev/null
+++ b/crm-local/app/Http/Controllers/Api/Dictionary/PositionController.php
@@ -0,0 +1,28 @@
+<?php
+
+namespace App\Http\Controllers\Api\Dictionary;
+
+use App\Models\Dictionary\Position;
+
+/**
+ * CRUD-контроллер для справочника "Должности".
+ */
+class PositionController extends BaseCrudController
+{
+    /** @var class-string<Position> */
+    protected string $modelClass = Position::class;
+
+    protected array $searchable = ['name','code'];
+    protected array $sortable   = ['id','name','code','created_at'];
+    protected array $filterable = ['is_active'];
+
+    protected function rules(string $scenario): array
+    {
+        return [
+            'name'      => ['required', 'string', 'max:255'],
+            'code'      => ['nullable', 'string', 'max:64'],
+            'is_active' => ['boolean'],
+            'comment'   => ['nullable', 'string', 'max:2000'],
+        ];
+    }
+}
\ No newline at end of file
diff --git a/crm-local/app/Http/Controllers/Api/Dictionary/UnitController.php b/crm-local/app/Http/Controllers/Api/Dictionary/UnitController.php
new file mode 100644
index 0000000..7e19d7f
--- /dev/null
+++ b/crm-local/app/Http/Controllers/Api/Dictionary/UnitController.php
@@ -0,0 +1,29 @@
+<?php
+
+namespace App\Http\Controllers\Api\Dictionary;
+
+use App\Models\Dictionary\Unit;
+
+/**
+ * CRUD-контроллер для справочника "Единицы измерения".
+ */
+class UnitController extends BaseCrudController
+{
+    /** @var class-string<Unit> */
+    protected string $modelClass = Unit::class;
+
+    protected array $searchable = ['name', 'short', 'okei_code'];
+    protected array $sortable   = ['id','name','short','okei_code','created_at'];
+    protected array $filterable = ['is_active'];
+
+    protected function rules(string $scenario): array
+    {
+        return [
+            'name'      => ['required', 'string', 'max:255'],
+            'short'     => ['nullable', 'string', 'max:16'],
+            'okei_code' => ['nullable', 'string', 'max:16'],
+            'is_active' => ['boolean'],
+            'comment'   => ['nullable', 'string', 'max:2000'],
+        ];
+    }
+}
\ No newline at end of file
diff --git a/crm-local/app/Http/Middleware/CheckRole.php b/crm-local/app/Http/Middleware/CheckRole.php
index f287fda..5aaf8e7 100644
--- a/crm-local/app/Http/Middleware/CheckRole.php
+++ b/crm-local/app/Http/Middleware/CheckRole.php
@@ -16,9 +16,14 @@ class CheckRole
      */
     public function handle(Request $request, Closure $next, ...$roles)
     {
-        $user = auth('api')->user();
-        if (!$user || !in_array($user->role, $roles)) {
-            return response()->json(['error' => 'Нет доступа'], 403);
+        // Попытаться получить пользователя из web-сессии или api guard
+        $user = $request->user() ?? auth('api')->user();
+        if (!$user || !in_array($user->role, $roles, true)) {
+            // Для API возвращаем JSON, для web - стандартный 403
+            if ($request->expectsJson()) {
+                return response()->json(['error' => 'Нет доступа'], 403);
+            }
+            abort(403, 'Нет доступа');
         }
         return $next($request);
     }
diff --git a/crm-local/app/Models/Dictionary/EmployeeType.php b/crm-local/app/Models/Dictionary/EmployeeType.php
new file mode 100644
index 0000000..3adf663
--- /dev/null
+++ b/crm-local/app/Models/Dictionary/EmployeeType.php
@@ -0,0 +1,23 @@
+<?php
+
+namespace App\Models\Dictionary;
+
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\SoftDeletes;
+
+/**
+ * Модель "Тип сотрудника".
+ */
+class EmployeeType extends Model
+{
+    use SoftDeletes;
+
+    protected $table = 'employee_types';
+
+    protected $fillable = [
+        'name',
+        'description',
+        'is_active',
+        'comment',
+    ];
+}
\ No newline at end of file
diff --git a/crm-local/app/Models/Dictionary/EquipmentGroup.php b/crm-local/app/Models/Dictionary/EquipmentGroup.php
new file mode 100644
index 0000000..09b61ff
--- /dev/null
+++ b/crm-local/app/Models/Dictionary/EquipmentGroup.php
@@ -0,0 +1,23 @@
+<?php
+
+namespace App\Models\Dictionary;
+
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\SoftDeletes;
+
+/**
+ * Модель "Группа оборудования".
+ */
+class EquipmentGroup extends Model
+{
+    use SoftDeletes;
+
+    protected $table = 'equipment_groups';
+
+    protected $fillable = [
+        'name',
+        'description',
+        'is_active',
+        'comment',
+    ];
+}
\ No newline at end of file
diff --git a/crm-local/app/Models/Dictionary/PaymentType.php b/crm-local/app/Models/Dictionary/PaymentType.php
new file mode 100644
index 0000000..2575ee7
--- /dev/null
+++ b/crm-local/app/Models/Dictionary/PaymentType.php
@@ -0,0 +1,24 @@
+<?php
+
+namespace App\Models\Dictionary;
+
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\SoftDeletes;
+
+/**
+ * Модель "Тип платежа".
+ */
+class PaymentType extends Model
+{
+    use SoftDeletes;
+
+    protected $table = 'payment_types';
+
+    protected $fillable = [
+        'name',
+        'short_name',
+        'label_color',
+        'is_visible',
+        'comment',
+    ];
+}
\ No newline at end of file
diff --git a/crm-local/app/Models/Dictionary/Position.php b/crm-local/app/Models/Dictionary/Position.php
new file mode 100644
index 0000000..bd16af3
--- /dev/null
+++ b/crm-local/app/Models/Dictionary/Position.php
@@ -0,0 +1,23 @@
+<?php
+
+namespace App\Models\Dictionary;
+
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\SoftDeletes;
+
+/**
+ * Модель "Должность".
+ */
+class Position extends Model
+{
+    use SoftDeletes;
+
+    protected $table = 'positions';
+
+    protected $fillable = [
+        'name',
+        'code',
+        'is_active',
+        'comment',
+    ];
+}
\ No newline at end of file
diff --git a/crm-local/app/Models/Dictionary/Unit.php b/crm-local/app/Models/Dictionary/Unit.php
new file mode 100644
index 0000000..2592359
--- /dev/null
+++ b/crm-local/app/Models/Dictionary/Unit.php
@@ -0,0 +1,24 @@
+<?php
+
+namespace App\Models\Dictionary;
+
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\SoftDeletes;
+
+/**
+ * Модель "Единицы измерения".
+ */
+class Unit extends Model
+{
+    use SoftDeletes;
+
+    protected $table = 'units';
+
+    protected $fillable = [
+        'name',
+        'short',
+        'okei_code',
+        'is_active',
+        'comment',
+    ];
+}
\ No newline at end of file
diff --git a/crm-local/database/migrations/2025_08_08_100000_create_units_table.php b/crm-local/database/migrations/2025_08_08_100000_create_units_table.php
new file mode 100644
index 0000000..c1cb2f2
--- /dev/null
+++ b/crm-local/database/migrations/2025_08_08_100000_create_units_table.php
@@ -0,0 +1,26 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration {
+    public function up(): void
+    {
+        Schema::create('units', function (Blueprint $table) {
+            $table->id();
+            $table->string('name')->index();
+            $table->string('short', 16)->nullable()->index();
+            $table->string('okei_code', 16)->nullable()->index();
+            $table->boolean('is_active')->default(true)->index();
+            $table->text('comment')->nullable();
+            $table->softDeletes();
+            $table->timestamps();
+        });
+    }
+
+    public function down(): void
+    {
+        Schema::dropIfExists('units');
+    }
+};
\ No newline at end of file
diff --git a/crm-local/database/migrations/2025_08_08_100001_create_payment_types_table.php b/crm-local/database/migrations/2025_08_08_100001_create_payment_types_table.php
new file mode 100644
index 0000000..b91e5e7
--- /dev/null
+++ b/crm-local/database/migrations/2025_08_08_100001_create_payment_types_table.php
@@ -0,0 +1,26 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration {
+    public function up(): void
+    {
+        Schema::create('payment_types', function (Blueprint $table) {
+            $table->id();
+            $table->string('name')->index();
+            $table->string('short_name')->nullable()->index();
+            $table->string('label_color', 32)->nullable();
+            $table->boolean('is_visible')->default(true)->index();
+            $table->text('comment')->nullable();
+            $table->softDeletes();
+            $table->timestamps();
+        });
+    }
+
+    public function down(): void
+    {
+        Schema::dropIfExists('payment_types');
+    }
+};
\ No newline at end of file
diff --git a/crm-local/database/migrations/2025_08_08_100002_create_employee_types_table.php b/crm-local/database/migrations/2025_08_08_100002_create_employee_types_table.php
new file mode 100644
index 0000000..896d005
--- /dev/null
+++ b/crm-local/database/migrations/2025_08_08_100002_create_employee_types_table.php
@@ -0,0 +1,25 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration {
+    public function up(): void
+    {
+        Schema::create('employee_types', function (Blueprint $table) {
+            $table->id();
+            $table->string('name')->index();
+            $table->text('description')->nullable();
+            $table->boolean('is_active')->default(true)->index();
+            $table->text('comment')->nullable();
+            $table->softDeletes();
+            $table->timestamps();
+        });
+    }
+
+    public function down(): void
+    {
+        Schema::dropIfExists('employee_types');
+    }
+};
\ No newline at end of file
diff --git a/crm-local/database/migrations/2025_08_08_100003_create_equipment_groups_table.php b/crm-local/database/migrations/2025_08_08_100003_create_equipment_groups_table.php
new file mode 100644
index 0000000..ef949c4
--- /dev/null
+++ b/crm-local/database/migrations/2025_08_08_100003_create_equipment_groups_table.php
@@ -0,0 +1,25 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration {
+    public function up(): void
+    {
+        Schema::create('equipment_groups', function (Blueprint $table) {
+            $table->id();
+            $table->string('name')->index();
+            $table->text('description')->nullable();
+            $table->boolean('is_active')->default(true)->index();
+            $table->text('comment')->nullable();
+            $table->softDeletes();
+            $table->timestamps();
+        });
+    }
+
+    public function down(): void
+    {
+        Schema::dropIfExists('equipment_groups');
+    }
+};
\ No newline at end of file
diff --git a/crm-local/database/migrations/2025_08_08_100004_create_positions_table.php b/crm-local/database/migrations/2025_08_08_100004_create_positions_table.php
new file mode 100644
index 0000000..ca8d551
--- /dev/null
+++ b/crm-local/database/migrations/2025_08_08_100004_create_positions_table.php
@@ -0,0 +1,25 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration {
+    public function up(): void
+    {
+        Schema::create('positions', function (Blueprint $table) {
+            $table->id();
+            $table->string('name')->index();
+            $table->string('code')->nullable()->index();
+            $table->boolean('is_active')->default(true)->index();
+            $table->text('comment')->nullable();
+            $table->softDeletes();
+            $table->timestamps();
+        });
+    }
+
+    public function down(): void
+    {
+        Schema::dropIfExists('positions');
+    }
+};
\ No newline at end of file
diff --git a/crm-local/routes/api.php b/crm-local/routes/api.php
index 70ca5ae..0a34c83 100644
--- a/crm-local/routes/api.php
+++ b/crm-local/routes/api.php
@@ -3,6 +3,11 @@
 use Illuminate\Http\Request;
 use Illuminate\Support\Facades\Route;
 use App\Http\Controllers\Api\AuthApiController;
+use App\Http\Controllers\Api\Dictionary\UnitController;
+use App\Http\Controllers\Api\Dictionary\PaymentTypeController;
+use App\Http\Controllers\Api\Dictionary\EmployeeTypeController;
+use App\Http\Controllers\Api\Dictionary\EquipmentGroupController;
+use App\Http\Controllers\Api\Dictionary\PositionController;
 
 // Аутентификация и восстановление пароля
 Route::post('login', [AuthApiController::class, 'login']);
@@ -21,6 +26,49 @@
     Route::delete('users/{id}', [AuthApiController::class, 'destroy']);
 });
 
+// Группа для справочников (только администраторы и менеджеры)
+Route::middleware(['auth:api', 'role:admin,manager'])->prefix('dictionaries')->group(function () {
+    // Единицы измерения
+    Route::get('units', [UnitController::class, 'index']);
+    Route::get('units/{id}', [UnitController::class, 'show']);
+    Route::post('units', [UnitController::class, 'store']);
+    Route::put('units/{id}', [UnitController::class, 'update']);
+    Route::delete('units/{id}', [UnitController::class, 'destroy']);
+    Route::post('units/{id}/restore', [UnitController::class, 'restore']);
+
+    // Типы платежей
+    Route::get('payment-types', [PaymentTypeController::class, 'index']);
+    Route::get('payment-types/{id}', [PaymentTypeController::class, 'show']);
+    Route::post('payment-types', [PaymentTypeController::class, 'store']);
+    Route::put('payment-types/{id}', [PaymentTypeController::class, 'update']);
+    Route::delete('payment-types/{id}', [PaymentTypeController::class, 'destroy']);
+    Route::post('payment-types/{id}/restore', [PaymentTypeController::class, 'restore']);
+
+    // Типы сотрудников
+    Route::get('employee-types', [EmployeeTypeController::class, 'index']);
+    Route::get('employee-types/{id}', [EmployeeTypeController::class, 'show']);
+    Route::post('employee-types', [EmployeeTypeController::class, 'store']);
+    Route::put('employee-types/{id}', [EmployeeTypeController::class, 'update']);
+    Route::delete('employee-types/{id}', [EmployeeTypeController::class, 'destroy']);
+    Route::post('employee-types/{id}/restore', [EmployeeTypeController::class, 'restore']);
+
+    // Группы оборудования
+    Route::get('equipment-groups', [EquipmentGroupController::class, 'index']);
+    Route::get('equipment-groups/{id}', [EquipmentGroupController::class, 'show']);
+    Route::post('equipment-groups', [EquipmentGroupController::class, 'store']);
+    Route::put('equipment-groups/{id}', [EquipmentGroupController::class, 'update']);
+    Route::delete('equipment-groups/{id}', [EquipmentGroupController::class, 'destroy']);
+    Route::post('equipment-groups/{id}/restore', [EquipmentGroupController::class, 'restore']);
+
+    // Должности
+    Route::get('positions', [PositionController::class, 'index']);
+    Route::get('positions/{id}', [PositionController::class, 'show']);
+    Route::post('positions', [PositionController::class, 'store']);
+    Route::put('positions/{id}', [PositionController::class, 'update']);
+    Route::delete('positions/{id}', [PositionController::class, 'destroy']);
+    Route::post('positions/{id}/restore', [PositionController::class, 'restore']);
+});
+
 // (если используешь Sanctum для web, можешь оставить этот маршрут)
 Route::middleware(['auth:sanctum'])->get('/user', function (Request $request) {
     return $request->user();
-- 
2.39.5

